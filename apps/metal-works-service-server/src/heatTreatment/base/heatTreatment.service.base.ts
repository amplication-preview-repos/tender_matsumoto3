/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HeatTreatment as PrismaHeatTreatment } from "@prisma/client";

export class HeatTreatmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HeatTreatmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.heatTreatment.count(args);
  }

  async heatTreatments(
    args: Prisma.HeatTreatmentFindManyArgs
  ): Promise<PrismaHeatTreatment[]> {
    return this.prisma.heatTreatment.findMany(args);
  }
  async heatTreatment(
    args: Prisma.HeatTreatmentFindUniqueArgs
  ): Promise<PrismaHeatTreatment | null> {
    return this.prisma.heatTreatment.findUnique(args);
  }
  async createHeatTreatment(
    args: Prisma.HeatTreatmentCreateArgs
  ): Promise<PrismaHeatTreatment> {
    return this.prisma.heatTreatment.create(args);
  }
  async updateHeatTreatment(
    args: Prisma.HeatTreatmentUpdateArgs
  ): Promise<PrismaHeatTreatment> {
    return this.prisma.heatTreatment.update(args);
  }
  async deleteHeatTreatment(
    args: Prisma.HeatTreatmentDeleteArgs
  ): Promise<PrismaHeatTreatment> {
    return this.prisma.heatTreatment.delete(args);
  }
}
