/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FileUpload as PrismaFileUpload } from "@prisma/client";

export class FileUploadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileUploadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileUpload.count(args);
  }

  async fileUploads(
    args: Prisma.FileUploadFindManyArgs
  ): Promise<PrismaFileUpload[]> {
    return this.prisma.fileUpload.findMany(args);
  }
  async fileUpload(
    args: Prisma.FileUploadFindUniqueArgs
  ): Promise<PrismaFileUpload | null> {
    return this.prisma.fileUpload.findUnique(args);
  }
  async createFileUpload(
    args: Prisma.FileUploadCreateArgs
  ): Promise<PrismaFileUpload> {
    return this.prisma.fileUpload.create(args);
  }
  async updateFileUpload(
    args: Prisma.FileUploadUpdateArgs
  ): Promise<PrismaFileUpload> {
    return this.prisma.fileUpload.update(args);
  }
  async deleteFileUpload(
    args: Prisma.FileUploadDeleteArgs
  ): Promise<PrismaFileUpload> {
    return this.prisma.fileUpload.delete(args);
  }
}
